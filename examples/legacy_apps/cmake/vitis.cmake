# Copyright (C) 2023 - 2024 Advanced Micro Devices, Inc.  All rights reserved.
# SPDX-License-Identifier: MIT
cmake_minimum_required(VERSION 3.24)

enable_language(C ASM CXX)
find_package(common)

set_property (GLOBAL PROPERTY OPENAMP_APP_NAME "${OPENAMP_APP_NAME}")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/")

include(CheckSymbolExists)
check_symbol_exists(ARMR5 "xparameters_ps.h" HAS_ARMR5)
if (HAS_ARMR5)
  set (CROSS_PREFIX "armr5-none-eabi-"	CACHE INTERNAL "" FORCE)
  set (CMAKE_SYSTEM_PROCESSOR "arm"	CACHE INTERNAL "" FORCE)
  set_property (GLOBAL PROPERTY MACHINE "zynqmp_r5")
else()
  message( FATAL_ERROR "Invalid machine. CMake will exit" )
  return()
endif()

# Ensure that for Compile step that the _AMD_GENERATED_ symbol is present
# for app build if it was provided in CMake configure tooling
if (_AMD_GENERATED_)
  add_definitions(-D_AMD_GENERATED_)
endif()

set_property (GLOBAL PROPERTY HAS_SYSTEM_DT ON)

check_symbol_exists(VERSAL_AIEPG2 "bspconfig.h" IS_VERSALGEN2)
check_symbol_exists(VERSAL_NET "bspconfig.h" IS_VERSAL_NET)
check_symbol_exists(VERSAL "bspconfig.h" IS_VERSAL)

if (IS_VERSALGEN2)
  set_property(GLOBAL PROPERTY SOC "VERSALGEN2")
elseif (IS_VERSAL_NET)
  set_property(GLOBAL PROPERTY SOC "VERSAL_NET")
elseif(IS_VERSAL)
  set_property(GLOBAL PROPERTY SOC "VERSAL")
else()
  set_property(GLOBAL PROPERTY SOC "ZYNQMP")
endif()

get_property (SOC GLOBAL PROPERTY SOC)
message("OpenAMP: SOC in build is: ${SOC}")

# Lopper plugin can generate linker meta data in below file
# This can define RSC_TABLE so include before
message("CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")
file (GLOB LINKER_METADATA_FILE "${CMAKE_SOURCE_DIR}/*Example.cmake")
if (EXISTS ${LINKER_METADATA_FILE})
  set_property(GLOBAL PROPERTY LINKER_METADATA_FILE ${LINKER_METADATA_FILE})
  message("OpenAMP: Linker will be configured using file: ${LINKER_METADATA_FILE}")
else()
  message("OpenAMP: Linker will be configured using static linker script for ${SOC}")
endif()

function (vitis_app_config)
  get_property (OPENAMP_APP_NAME GLOBAL PROPERTY OPENAMP_APP_NAME)
  if(OPENAMP_APP_NAME STREQUAL "rpc_demo")
    set(_app rpc_demo)
  elseif(OPENAMP_APP_NAME STREQUAL "echo")
    set (_app rpmsg-echo)
  elseif(OPENAMP_APP_NAME STREQUAL "matrix_multiply")
    set (_app matrix_multiplyd)
  endif()

  collect (APP_COMMON_SOURCES "${APPS_ROOT_DIR}/examples/${OPENAMP_APP_NAME}/${_app}.c")
  collect (APP_COMMON_SOURCES "${APPS_ROOT_DIR}/examples/${OPENAMP_APP_NAME}/${PROJECT_SYSTEM}/main.c")
  collector_list (_sources APP_COMMON_SOURCES)

  collector_list (_app_list APP_INC_DIRS)
  collector_list (_list PROJECT_INC_DIRS)
  include_directories (${_list} ${_app_list} ${APPS_ROOT_DIR} ${APPS_ROOT_DIR}/system/${PROJECT_SYSTEM}/machine/${PROJECT_MACHINE}/)
  collector_list (_list PROJECT_LIB_DIRS)
  collector_list (_app_list APP_LIB_DIRS)
  link_directories (${_list} ${_app_list} ${APPS_ROOT_DIR}/system/${PROJECT_SYSTEM}/machine/${PROJECT_MACHINE}/)
  # UserConfig.cmake is file generated by Vitis-Unified workspace for applications.
  include(${CMAKE_SOURCE_DIR}/UserConfig.cmake)
  set (executable_name ${CMAKE_PROJECT_NAME})
  add_executable (${executable_name}.elf ${_sources})
  set_source_files_properties(${_sources} PROPERTIES COMPILE_FLAGS "${_cflags}")
  target_link_libraries(${executable_name}.elf -Wl,-Map=${executable_name}.map -Wl,--gc-sections ${_linker_opt} -Wl,--start-group ${OPENAMP_LIB} ${_deps} -Wl,--end-group)
  target_compile_definitions(${executable_name}.elf PUBLIC ${USER_COMPILE_DEFINITIONS})
  install (TARGETS ${executable_name}.elf RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})
endfunction(vitis_app_config)
